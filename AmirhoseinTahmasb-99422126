{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "HW3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
 "cells": [
  {
   "cell_type": "codemark",
   "execution_count": 2,
   "metadata": {
        "id": "8b5oHynqRiVJ"
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn import svm\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "\n",
    "\n",
    "import scipy.stats as stats\n",
    "from scipy.stats import f_oneway\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "pd.set_option('display.max_columns',None)\n",
    "tdata = pd.read_csv(\"D:/Emir/DM/DataSet/train.csv\")\n",
    "edata=pd.read_csv(\"D:Emir/DM/DataSet/test.csv\")\n"
   ]
  },
  {
   "cell_type": "codemark",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842</td>\n",
       "      <td>0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>756</td>\n",
       "      <td>2549</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1021</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0.7</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>905</td>\n",
       "      <td>1988</td>\n",
       "      <td>2631</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>563</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0.9</td>\n",
       "      <td>145</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1263</td>\n",
       "      <td>1716</td>\n",
       "      <td>2603</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>615</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>131</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1216</td>\n",
       "      <td>1786</td>\n",
       "      <td>2769</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1821</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>0.6</td>\n",
       "      <td>141</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>1208</td>\n",
       "      <td>1212</td>\n",
       "      <td>1411</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  m_dep  \\\n",
       "0            842     0          2.2         0   1       0           7    0.6   \n",
       "1           1021     1          0.5         1   0       1          53    0.7   \n",
       "2            563     1          0.5         1   2       1          41    0.9   \n",
       "3            615     1          2.5         0   0       0          10    0.8   \n",
       "4           1821     1          1.2         0  13       1          44    0.6   \n",
       "\n",
       "   mobile_wt  n_cores  pc  px_height  px_width   ram  sc_h  sc_w  talk_time  \\\n",
       "0        188        2   2         20       756  2549     9     7         19   \n",
       "1        136        3   6        905      1988  2631    17     3          7   \n",
       "2        145        5   6       1263      1716  2603    11     2          9   \n",
       "3        131        6   9       1216      1786  2769    16     8         11   \n",
       "4        141        2  14       1208      1212  1411     8     2         15   \n",
       "\n",
       "   three_g  touch_screen  wifi  price_range  \n",
       "0        0             0     1            1  \n",
       "1        1             1     0            2  \n",
       "2        1             1     0            2  \n",
       "3        1             0     0            2  \n",
       "4        1             1     0            1  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdata.head()"
   ]
  },
  {
   "cell_type": "codemark",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.0000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1238.518500</td>\n",
       "      <td>0.4950</td>\n",
       "      <td>1.522250</td>\n",
       "      <td>0.509500</td>\n",
       "      <td>4.309500</td>\n",
       "      <td>0.521500</td>\n",
       "      <td>32.046500</td>\n",
       "      <td>0.501750</td>\n",
       "      <td>140.249000</td>\n",
       "      <td>4.520500</td>\n",
       "      <td>9.916500</td>\n",
       "      <td>645.108000</td>\n",
       "      <td>1251.515500</td>\n",
       "      <td>2124.213000</td>\n",
       "      <td>12.306500</td>\n",
       "      <td>5.767000</td>\n",
       "      <td>11.011000</td>\n",
       "      <td>0.761500</td>\n",
       "      <td>0.503000</td>\n",
       "      <td>0.507000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>439.418206</td>\n",
       "      <td>0.5001</td>\n",
       "      <td>0.816004</td>\n",
       "      <td>0.500035</td>\n",
       "      <td>4.341444</td>\n",
       "      <td>0.499662</td>\n",
       "      <td>18.145715</td>\n",
       "      <td>0.288416</td>\n",
       "      <td>35.399655</td>\n",
       "      <td>2.287837</td>\n",
       "      <td>6.064315</td>\n",
       "      <td>443.780811</td>\n",
       "      <td>432.199447</td>\n",
       "      <td>1084.732044</td>\n",
       "      <td>4.213245</td>\n",
       "      <td>4.356398</td>\n",
       "      <td>5.463955</td>\n",
       "      <td>0.426273</td>\n",
       "      <td>0.500116</td>\n",
       "      <td>0.500076</td>\n",
       "      <td>1.118314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>501.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>256.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>851.750000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>109.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>282.750000</td>\n",
       "      <td>874.750000</td>\n",
       "      <td>1207.500000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1226.000000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>141.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1247.000000</td>\n",
       "      <td>2146.500000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1615.250000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>170.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>947.250000</td>\n",
       "      <td>1633.000000</td>\n",
       "      <td>3064.500000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1998.000000</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>1998.000000</td>\n",
       "      <td>3998.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       battery_power       blue  clock_speed     dual_sim           fc  \\\n",
       "count    2000.000000  2000.0000  2000.000000  2000.000000  2000.000000   \n",
       "mean     1238.518500     0.4950     1.522250     0.509500     4.309500   \n",
       "std       439.418206     0.5001     0.816004     0.500035     4.341444   \n",
       "min       501.000000     0.0000     0.500000     0.000000     0.000000   \n",
       "25%       851.750000     0.0000     0.700000     0.000000     1.000000   \n",
       "50%      1226.000000     0.0000     1.500000     1.000000     3.000000   \n",
       "75%      1615.250000     1.0000     2.200000     1.000000     7.000000   \n",
       "max      1998.000000     1.0000     3.000000     1.000000    19.000000   \n",
       "\n",
       "            four_g   int_memory        m_dep    mobile_wt      n_cores  \\\n",
       "count  2000.000000  2000.000000  2000.000000  2000.000000  2000.000000   \n",
       "mean      0.521500    32.046500     0.501750   140.249000     4.520500   \n",
       "std       0.499662    18.145715     0.288416    35.399655     2.287837   \n",
       "min       0.000000     2.000000     0.100000    80.000000     1.000000   \n",
       "25%       0.000000    16.000000     0.200000   109.000000     3.000000   \n",
       "50%       1.000000    32.000000     0.500000   141.000000     4.000000   \n",
       "75%       1.000000    48.000000     0.800000   170.000000     7.000000   \n",
       "max       1.000000    64.000000     1.000000   200.000000     8.000000   \n",
       "\n",
       "                pc    px_height     px_width          ram         sc_h  \\\n",
       "count  2000.000000  2000.000000  2000.000000  2000.000000  2000.000000   \n",
       "mean      9.916500   645.108000  1251.515500  2124.213000    12.306500   \n",
       "std       6.064315   443.780811   432.199447  1084.732044     4.213245   \n",
       "min       0.000000     0.000000   500.000000   256.000000     5.000000   \n",
       "25%       5.000000   282.750000   874.750000  1207.500000     9.000000   \n",
       "50%      10.000000   564.000000  1247.000000  2146.500000    12.000000   \n",
       "75%      15.000000   947.250000  1633.000000  3064.500000    16.000000   \n",
       "max      20.000000  1960.000000  1998.000000  3998.000000    19.000000   \n",
       "\n",
       "              sc_w    talk_time      three_g  touch_screen         wifi  \\\n",
       "count  2000.000000  2000.000000  2000.000000   2000.000000  2000.000000   \n",
       "mean      5.767000    11.011000     0.761500      0.503000     0.507000   \n",
       "std       4.356398     5.463955     0.426273      0.500116     0.500076   \n",
       "min       0.000000     2.000000     0.000000      0.000000     0.000000   \n",
       "25%       2.000000     6.000000     1.000000      0.000000     0.000000   \n",
       "50%       5.000000    11.000000     1.000000      1.000000     1.000000   \n",
       "75%       9.000000    16.000000     1.000000      1.000000     1.000000   \n",
       "max      18.000000    20.000000     1.000000      1.000000     1.000000   \n",
       "\n",
       "       price_range  \n",
       "count  2000.000000  \n",
       "mean      1.500000  \n",
       "std       1.118314  \n",
       "min       0.000000  \n",
       "25%       0.750000  \n",
       "50%       1.500000  \n",
       "75%       2.250000  \n",
       "max       3.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdata.describe()\n"
   ]
  },
  {
      "cell_type": "codemark",
      "metadata": {
        "id": "Xv-3NeEUrHZY"
      },
      "source": [
        "categorical_features = ['blue', 'dual_sim', 'four_g', 'three_g', 'touch_screen', 'wifi']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "mar",
      "metadata": {},
      "output_type": "execute_result"
      "source": [
         "tdata.describe()\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
        
      },
      "source": [
        "#delete a column if more than 50% of instances have null value\n",
        "to_be_deleted_cols = train_df.columns[train_df.isna().sum()/len(train_df) > 0.50]\n",
        "train_df.drop(columns=to_be_deleted_cols, inplace = True)\n",
        "print(train_df.shape)\n",
        "\n",
        "# Numerical Feature: If an instance has Nan value for a column, replace it with average value of that feature \n",
        "features_mean_val = train_df._get_numeric_data().mean()\n",
        "train_df.fillna(features_mean_val, inplace = True)\n",
        "\n",
        "# Categorical Feature: If an instance has Nan value for a column, replace it with the value that is the most frequent\n",
        "for col in train_df.columns:\n",
        "  if train_df[col].dtype == 'object' or train_df[col].dtype == 'bool' or col in categorical_features:\n",
        "    highest_count = train_df[col].value_counts().index[0]\n",
        "    print('Column: {}, Most frequent value: {}'.format(col, highest_count))\n",
        "    train_df[col].fillna(highest_count, inplace = True)\n",
        "  \n",
        "\n",
        "\n",
        "# Find categorical features that have too many (50+) possible values and remove them\n",
        "col_w_too_vals = []\n",
        "for col in train_df.columns:\n",
        "    if train_df[col].dtype == 'object' or train_df[col].dtype == 'bool' or col in categorical_features:\n",
        "      if train_df[col].nunique() >=50:\n",
        "        col_w_too_vals.append(col)\n",
        "        print('cols : {} , # of unique values : {}'.format(col, train_df[col].nunique()))\n",
        "\n",
        "train_df = train_df.drop(columns=col_w_too_vals)\n",
        "\n",
        "# Keep a version of data before normalization for question 6\n",
        "train_df_org =train_df.copy(deep = True)\n",
        "\n",
        "# normalize\n",
        "for cols in train_df.columns:\n",
        "  if (train_df[cols].dtype == 'int64' or train_df[cols].dtype == 'float64') and (train_df[cols].dtype!='bool' and train_df[cols].dtype!='object' and not (cols in categorical_features)) :\n",
        "    print(cols)\n",
        "    if cols != 'price_range':\n",
        "      train_df[cols] = ((train_df[cols] - train_df[cols].mean())/train_df[cols].std())\n",
        "\n",
        "train_df.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2000, 21)\n",
            "Column: blue, Most frequent value: 0\n",
            "Column: dual_sim, Most frequent value: 1\n",
            "Column: four_g, Most frequent value: 1\n",
            "Column: three_g, Most frequent value: 1\n",
            "Column: touch_screen, Most frequent value: 1\n",
            "Column: wifi, Most frequent value: 1\n",
            "battery_power\n",
            "clock_speed\n",
            "fc\n",
            "int_memory\n",
            "m_dep\n",
            "mobile_wt\n",
            "n_cores\n",
            "pc\n",
            "px_height\n",
            "px_width\n",
            "ram\n",
            "sc_h\n",
            "sc_w\n",
            "talk_time\n",
            "price_range\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2000, 21)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
       "tags": []
          },
          "execution_count": 40
      },
      "source": [
        "from sklearn.utils import shuffle\n",
        "\n",
        "features = list(train_df.columns)[:-1]\n",
        "\n",
        "X = train_df[features]\n",
        "y = train_df[\"price_range\"]\n",
        "labels = np.unique(y)\n",
        "print(len(X), len(labels))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2000 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        
      },
      "source": [
        "X.head(2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>battery_power</th>\n",
              "      <th>blue</th>\n",
              "      <th>clock_speed</th>\n",
              "      <th>dual_sim</th>\n",
              "      <th>fc</th>\n",
              "      <th>four_g</th>\n",
              "      <th>int_memory</th>\n",
              "      <th>m_dep</th>\n",
              "      <th>mobile_wt</th>\n",
              "      <th>n_cores</th>\n",
              "      <th>pc</th>\n",
              "      <th>px_height</th>\n",
              "      <th>px_width</th>\n",
              "      <th>ram</th>\n",
              "      <th>sc_h</th>\n",
              "      <th>sc_w</th>\n",
              "      <th>talk_time</th>\n",
              "      <th>three_g</th>\n",
              "      <th>touch_screen</th>\n",
              "      <th>wifi</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.902372</td>\n",
              "      <td>0</td>\n",
              "      <td>0.830572</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.762304</td>\n",
              "      <td>0</td>\n",
              "      <td>-1.380298</td>\n",
              "      <td>0.340654</td>\n",
              "      <td>1.348911</td>\n",
              "      <td>-1.101696</td>\n",
              "      <td>-1.305424</td>\n",
              "      <td>-1.408596</td>\n",
              "      <td>-1.146497</td>\n",
              "      <td>0.391605</td>\n",
              "      <td>-0.784787</td>\n",
              "      <td>0.283032</td>\n",
              "      <td>1.462128</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.495015</td>\n",
              "      <td>1</td>\n",
              "      <td>-1.252751</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.992642</td>\n",
              "      <td>1</td>\n",
              "      <td>1.154735</td>\n",
              "      <td>0.687376</td>\n",
              "      <td>-0.120029</td>\n",
              "      <td>-0.664602</td>\n",
              "      <td>-0.645827</td>\n",
              "      <td>0.585631</td>\n",
              "      <td>1.704039</td>\n",
              "      <td>0.467200</td>\n",
              "      <td>1.113987</td>\n",
              "      <td>-0.635158</td>\n",
              "      <td>-0.734084</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   battery_power  blue  clock_speed  ...  three_g  touch_screen  wifi\n",
              "0      -0.902372     0     0.830572  ...        0             0     1\n",
              "1      -0.495015     1    -1.252751  ...        1             1     0\n",
              "\n",
              "[2 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F-A0AmslS4PI"
      },
      "source": [
        "**SVM**"
      ]
    },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#normalize numeric values and delete outlier\n",
    "#for cols in tdata.columns:\n",
    "  #  if tdata[cols].dtype=='int64' or tdata[cols].dtype=='float64':\n",
    "   #     tdata[cols]=((tdata[cols]-tdata[cols].mean())/(tdata[cols].std()))\n",
    "    #    upper_range=tdata[cols].mean()+3*tdata[cols].std()\n",
    "     #   lower_range=tdata[cols].mean()-3*tdata[cols].std()\n",
    "      #  indexs=tdata[(tdata[cols]>upper_range)| (tdata[cols]<lower_range)].index\n",
    "       # tdata=tdata.drop(indexs)\n",
    "#tdata.head() \n",
    "#tdata.shape     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1988, 21)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for cols in tdata.columns:\n",
    "    if tdata[cols].dtype=='int64' or tdata[cols].dtype=='float64':\n",
    "        upper_range=tdata[cols].mean()+3*tdata[cols].std()\n",
    "        lower_range=tdata[cols].mean()-3*tdata[cols].std()\n",
    "        indexs=tdata[(tdata[cols]>upper_range)| (tdata[cols]<lower_range)].index\n",
    "        tdata=tdata.drop(indexs)\n",
    "tdata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#label_encoder = LabelEncoder()\n",
    "#for cols in tdata.columns:\n",
    " #   tdata[cols]=label_encoder.fit_transform(tdata[cols])\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842</td>\n",
       "      <td>0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>756</td>\n",
       "      <td>2549</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1021</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0.7</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>905</td>\n",
       "      <td>1988</td>\n",
       "      <td>2631</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>563</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0.9</td>\n",
       "      <td>145</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1263</td>\n",
       "      <td>1716</td>\n",
       "      <td>2603</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>615</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>131</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1216</td>\n",
       "      <td>1786</td>\n",
       "      <td>2769</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1821</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>0.6</td>\n",
       "      <td>141</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>1208</td>\n",
       "      <td>1212</td>\n",
       "      <td>1411</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  m_dep  \\\n",
       "0            842     0          2.2         0   1       0           7    0.6   \n",
       "1           1021     1          0.5         1   0       1          53    0.7   \n",
       "2            563     1          0.5         1   2       1          41    0.9   \n",
       "3            615     1          2.5         0   0       0          10    0.8   \n",
       "4           1821     1          1.2         0  13       1          44    0.6   \n",
       "\n",
       "   mobile_wt  n_cores  pc  px_height  px_width   ram  sc_h  sc_w  talk_time  \\\n",
       "0        188        2   2         20       756  2549     9     7         19   \n",
       "1        136        3   6        905      1988  2631    17     3          7   \n",
       "2        145        5   6       1263      1716  2603    11     2          9   \n",
       "3        131        6   9       1216      1786  2769    16     8         11   \n",
       "4        141        2  14       1208      1212  1411     8     2         15   \n",
       "\n",
       "   three_g  touch_screen  wifi  price_range  \n",
       "0        0             0     1            1  \n",
       "1        1             1     0            2  \n",
       "2        1             1     0            2  \n",
       "3        1             0     0            2  \n",
       "4        1             1     0            1  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1043</td>\n",
       "      <td>1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>193</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>226</td>\n",
       "      <td>1412</td>\n",
       "      <td>3476</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>841</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>0.8</td>\n",
       "      <td>191</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>746</td>\n",
       "      <td>857</td>\n",
       "      <td>3895</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1807</td>\n",
       "      <td>1</td>\n",
       "      <td>2.8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>0.9</td>\n",
       "      <td>186</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1270</td>\n",
       "      <td>1366</td>\n",
       "      <td>2396</td>\n",
       "      <td>17</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1546</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>0.5</td>\n",
       "      <td>96</td>\n",
       "      <td>8</td>\n",
       "      <td>20</td>\n",
       "      <td>295</td>\n",
       "      <td>1752</td>\n",
       "      <td>3893</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1434</td>\n",
       "      <td>0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>0.5</td>\n",
       "      <td>108</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>749</td>\n",
       "      <td>810</td>\n",
       "      <td>1773</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  \\\n",
       "0   1           1043     1          1.8         1  14       0           5   \n",
       "1   2            841     1          0.5         1   4       1          61   \n",
       "2   3           1807     1          2.8         0   1       0          27   \n",
       "3   4           1546     0          0.5         1  18       1          25   \n",
       "4   5           1434     0          1.4         0  11       1          49   \n",
       "\n",
       "   m_dep  mobile_wt  n_cores  pc  px_height  px_width   ram  sc_h  sc_w  \\\n",
       "0    0.1        193        3  16        226      1412  3476    12     7   \n",
       "1    0.8        191        5  12        746       857  3895     6     0   \n",
       "2    0.9        186        3   4       1270      1366  2396    17    10   \n",
       "3    0.5         96        8  20        295      1752  3893    10     0   \n",
       "4    0.5        108        6  18        749       810  1773    15     8   \n",
       "\n",
       "   talk_time  three_g  touch_screen  wifi  \n",
       "0          2        0             1     0  \n",
       "1          7        1             0     0  \n",
       "2         10        0             1     1  \n",
       "3          7        1             1     0  \n",
       "4          7        1             0     1  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 4320x4320 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "ram            0.916742\n",
       "price_range    1.000000\n",
       "Name: price_range, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr=tdata.corr()\n",
    "f,ax=plt.subplots(figsize=(60,60))\n",
    "sns.heatmap(corr,square=True , annot=True)\n",
    "plt.xticks(range(len(corr.columns)), corr.columns);\n",
    "plt.yticks(range(len(corr.columns)), corr.columns)\n",
    "plt.show()\n",
    "#Correlation with output variable\n",
    "cor_target = corr['price_range']\n",
    "#Select highly correlated features\n",
    "relevant_features = cor_target[cor_target>0.5]\n",
    "relevant_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "battery_power    0.201768\n",
       "blue             0.018009\n",
       "clock_speed     -0.006042\n",
       "dual_sim         0.019325\n",
       "fc               0.027334\n",
       "four_g           0.015254\n",
       "int_memory       0.044144\n",
       "m_dep           -0.001570\n",
       "mobile_wt       -0.031180\n",
       "n_cores          0.007159\n",
       "pc               0.036343\n",
       "px_height        0.150439\n",
       "px_width         0.167571\n",
       "sc_h             0.024294\n",
       "sc_w             0.037836\n",
       "talk_time        0.020810\n",
       "three_g          0.023952\n",
       "touch_screen    -0.031501\n",
       "wifi             0.018434\n",
       "Name: price_range, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation with output variable\n",
    "cor_target = corr['price_range']\n",
    "#Select highly correlated features\n",
    "relevant_features = cor_target[cor_target<0.5]\n",
    "relevant_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842</td>\n",
       "      <td>0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>756</td>\n",
       "      <td>2549</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1021</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0.7</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>905</td>\n",
       "      <td>1988</td>\n",
       "      <td>2631</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>563</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0.9</td>\n",
       "      <td>145</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1263</td>\n",
       "      <td>1716</td>\n",
       "      <td>2603</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>615</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>131</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1216</td>\n",
       "      <td>1786</td>\n",
       "      <td>2769</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1821</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>0.6</td>\n",
       "      <td>141</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>1208</td>\n",
       "      <td>1212</td>\n",
       "      <td>1411</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  m_dep  \\\n",
       "0            842     0          2.2         0   1       0           7    0.6   \n",
       "1           1021     1          0.5         1   0       1          53    0.7   \n",
       "2            563     1          0.5         1   2       1          41    0.9   \n",
       "3            615     1          2.5         0   0       0          10    0.8   \n",
       "4           1821     1          1.2         0  13       1          44    0.6   \n",
       "\n",
       "   mobile_wt  n_cores  pc  px_height  px_width   ram  sc_h  sc_w  talk_time  \\\n",
       "0        188        2   2         20       756  2549     9     7         19   \n",
       "1        136        3   6        905      1988  2631    17     3          7   \n",
       "2        145        5   6       1263      1716  2603    11     2          9   \n",
       "3        131        6   9       1216      1786  2769    16     8         11   \n",
       "4        141        2  14       1208      1212  1411     8     2         15   \n",
       "\n",
       "   three_g  touch_screen  wifi  price_range  \n",
       "0        0             0     1            1  \n",
       "1        1             1     0            2  \n",
       "2        1             1     0            2  \n",
       "3        1             0     0            2  \n",
       "4        1             1     0            1  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "tdata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9597989949748744\n",
      "Precision: 0.9621458082440818\n",
      "Recall: 0.9597989949748744\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      0.96      0.98       106\n",
      "           1       0.90      0.99      0.94       100\n",
      "           2       0.99      0.90      0.94        99\n",
      "           3       0.97      0.99      0.98        93\n",
      "\n",
      "    accuracy                           0.96       398\n",
      "   macro avg       0.96      0.96      0.96       398\n",
      "weighted avg       0.96      0.96      0.96       398\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y1 = tdata['price_range']\n",
    "x1= tdata.drop(columns = ['price_range'])\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split( x1, y1, test_size=0.2, random_state=42)\n",
    "\n",
    "######Create a # Linear Kernel svm Classifier\n",
    "clf = svm.SVC(kernel='linear')\n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='weighted'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='weighted'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.23366834170854273\n",
      "Precision: 0.05841708542713568\n",
      "Recall: 0.25\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       106\n",
      "           1       0.00      0.00      0.00       100\n",
      "           2       0.00      0.00      0.00        99\n",
      "           3       0.23      1.00      0.38        93\n",
      "\n",
      "    accuracy                           0.23       398\n",
      "   macro avg       0.06      0.25      0.09       398\n",
      "weighted avg       0.05      0.23      0.09       398\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "#Create an rbf Kernel svm Classifier\n",
    "clf = svm.SVC(kernel='rbf') \n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.23366834170854273\n",
      "Precision: 0.05841708542713568\n",
      "Recall: 0.25\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       106\n",
      "           1       0.00      0.00      0.00       100\n",
      "           2       0.00      0.00      0.00        99\n",
      "           3       0.23      1.00      0.38        93\n",
      "\n",
      "    accuracy                           0.23       398\n",
      "   macro avg       0.06      0.25      0.09       398\n",
      "weighted avg       0.05      0.23      0.09       398\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#Create a sigmoid svm Classifier\n",
    "clf = svm.SVC(kernel='sigmoid')\n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.23366834170854273\n",
      "Precision: 0.05841708542713568\n",
      "Recall: 0.25\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       106\n",
      "           1       0.00      0.00      0.00       100\n",
      "           2       0.00      0.00      0.00        99\n",
      "           3       0.23      1.00      0.38        93\n",
      "\n",
      "    accuracy                           0.23       398\n",
      "   macro avg       0.06      0.25      0.09       398\n",
      "weighted avg       0.05      0.23      0.09       398\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#Create a svm Classifier\n",
    "clf = svm.SVC(kernel='rbf',gamma=0.1)\n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.23366834170854273\n",
      "Precision: 0.054600893916820284\n",
      "Recall: 0.23366834170854273\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       106\n",
      "           1       0.00      0.00      0.00       100\n",
      "           2       0.00      0.00      0.00        99\n",
      "           3       0.23      1.00      0.38        93\n",
      "\n",
      "    accuracy                           0.23       398\n",
      "   macro avg       0.06      0.25      0.09       398\n",
      "weighted avg       0.05      0.23      0.09       398\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#Create a svm Classifier\n",
    "clf = svm.SVC(kernel='rbf',gamma=1) # Linear Kernel\n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='weighted'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='weighted'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'(slice(None, None, None), 0)' is an invalid key",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-18-847cbcbba7d2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     43\u001b[0m                 \u001b[0mfacecolors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'none'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mzorder\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0medgecolors\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'k'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     44\u001b[0m                 cmap=cm.get_cmap('RdBu'))\n\u001b[1;32m---> 45\u001b[1;33m     plt.scatter(x1[:, 0], x1[:, 1], c=y1, zorder=10, cmap=cm.get_cmap('RdBu'),\n\u001b[0m\u001b[0;32m     46\u001b[0m                 edgecolors='k')\n\u001b[0;32m     47\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   2925\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2926\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2927\u001b[1;33m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2928\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2929\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\u001b[0m in \u001b[0;36mget_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   2655\u001b[0m                                  'backfill or nearest lookups')\n\u001b[0;32m   2656\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2657\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2658\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2659\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: '(slice(None, None, None), 0)' is an invalid key"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Code source: Gaël Varoquaux\n",
    "# Modified for documentation by Jaques Grobler\n",
    "# License: BSD 3 clause\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "from sklearn import svm\n",
    "\n",
    "\n",
    "\n",
    "# figure number\n",
    "fignum = 1\n",
    "\n",
    "# fit the model\n",
    "for name, penalty in (('unreg', 1), ('reg', 0.05)):\n",
    "\n",
    "    clf = svm.SVC(kernel='linear', C=penalty)\n",
    "    clf.fit(x1, y1)\n",
    "\n",
    "    # get the separating hyperplane\n",
    "    w = clf.coef_[0]\n",
    "    a = -w[0] / w[1]\n",
    "    xx = np.linspace(-5, 5)\n",
    "    yy = a * xx - (clf.intercept_[0]) / w[1]\n",
    "\n",
    "    # plot the parallels to the separating hyperplane that pass through the\n",
    "    # support vectors (margin away from hyperplane in direction\n",
    "    # perpendicular to hyperplane). This is sqrt(1+a^2) away vertically in\n",
    "    # 2-d.\n",
    "    margin = 1 / np.sqrt(np.sum(clf.coef_ ** 2))\n",
    "    yy_down = yy - np.sqrt(1 + a ** 2) * margin\n",
    "    yy_up = yy + np.sqrt(1 + a ** 2) * margin\n",
    "\n",
    "    # plot the line, the points, and the nearest vectors to the plane\n",
    "    plt.figure(fignum, figsize=(4, 3))\n",
    "    plt.clf()\n",
    "    plt.plot(xx, yy, 'k-')\n",
    "    plt.plot(xx, yy_down, 'k--')\n",
    "    plt.plot(xx, yy_up, 'k--')\n",
    "\n",
    "    plt.scatter(clf.support_vectors_[:, 0], clf.support_vectors_[:, 1], s=80,\n",
    "                facecolors='none', zorder=10, edgecolors='k',\n",
    "                cmap=cm.get_cmap('RdBu'))\n",
    "    plt.scatter(x1[:, 0], x1[:, 1], c=y1, zorder=10, cmap=cm.get_cmap('RdBu'),\n",
    "                edgecolors='k')\n",
    "\n",
    "    plt.axis('tight')\n",
    "    x_min = -4.8\n",
    "    x_max = 4.2\n",
    "    y_min = -6\n",
    "    y_max = 6\n",
    "\n",
    "    YY, XX = np.meshgrid(yy, xx)\n",
    "    xy = np.vstack([XX.ravel(), YY.ravel()]).T\n",
    "    Z = clf.decision_function(xy).reshape(XX.shape)\n",
    "\n",
    "    # Put the result into a contour plot\n",
    "    plt.contourf(XX, YY, Z, cmap=cm.get_cmap('RdBu'),\n",
    "                 alpha=0.5, linestyles=['-'])\n",
    "\n",
    "    plt.xlim(x_min, x_max)\n",
    "    plt.ylim(y_min, y_max)\n",
    "\n",
    "    plt.xticks(())\n",
    "    plt.yticks(())\n",
    "    fignum = fignum + 1\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([357., 336., 325., 314., 327., 329.]),\n",
       " array([ 501. ,  750.5, 1000. , 1249.5, 1499. , 1748.5, 1998. ]),\n",
       " <a list of 6 Patch objects>)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAATP0lEQVR4nO3df4ylV33f8fenXrPmV1g7Hrub9Yo1dGnjVMranTjbkjbERmBbVdaRoDKqwoa62jQ1FaA0jR2kkkhFgvzAKlJrtKkdlpRiXAO1FTkNjjFF/GE7Y2e92CyuB/xr2K13qLGBIjux+faPeyZcdmd27vy4s7Nn3y/p6j7Pec6993vPzP3Mc8997jOpKiRJfflbJ7oASdLqM9wlqUOGuyR1yHCXpA4Z7pLUoQ0nugCAs88+u7Zt23aiy5Ckk8r999//raqamG/bugj3bdu2MTU1daLLkKSTSpInFtrmtIwkdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXopA/3bdueJ6GLy7Ztz5/o4ZTUiUVPP5DkDOBLwMbW/9aq+kCSjwM/DzzXuv5KVe1PEuA/AlcA32/tD4yjeIAnnjiDqozr7tdU4n/FkrQ6Rjm3zAvAJVX1vSSnA19O8qdt229U1a1H9b8c2N4uPwvc0K4lSWtk0WmZGvheWz29XY63i7kL+ES73T3ApiSbV16qJGlUI825JzktyX7gCHBnVd3bNn0wyYEk1yfZ2Nq2AE8N3XymtR19n3uSTCWZmp2dXcFTkCQdbaRwr6qXqmoHcB5wcZK/D1wH/D3gZ4CzgN9s3eebAD9mT7+q9lbVZFVNTkzMezpiSdIyLelomap6FvgicFlVHW5TLy8AfwRc3LrNAFuHbnYecGgVapUkjWjRcE8ykWRTW3458Gbga3Pz6O3omCuBh9pNbgfemYGdwHNVdXgs1UuS5jXK0TKbgX1JTmPwx+CWqvqTJF9IMsFgGmY/8K9a/zsYHAY5zeBQyHetftmSpONZNNyr6gBw4TztlyzQv4BrVl6aJGm5TvpvqEqSjmW4S1KHRplz1xrZuPF5Bmd7OPm99rXP8/jjfTwX6WRkuK8jL7zgeXIkrQ6nZSSpQ4a7JHXIcJd00vH/OCzOOXfpFLFt2/M88UQvH3L7+dRiDHeNhUf+rD/+Y5tTi+GusfDIH+nEcs5dkjpkuEtShwx3SeqQ4S5JHTLcJalDHi0jLaKnwzp16jDcpUX0clinh3SeWpyWkaQOGe6S1CHDXZI6tGi4JzkjyX1JHkzycJLfae3nJ7k3yaNJPp3kZa19Y1ufbtu3jfcpSJKONsqe+wvAJVX108AO4LIkO4EPA9dX1Xbg28DVrf/VwLer6u8A17d+kqQ1tGi418D32urp7VLAJcCtrX0fcGVb3tXWadsvTXLyH2ogSSeRkebck5yWZD9wBLgT+DrwbFW92LrMAFva8hbgKYC2/Tngx+e5zz1JppJMzc7OruxZSJJ+xEjhXlUvVdUO4DzgYuAn5+vWrufbSz/mANuq2ltVk1U1OTExMWq9kqQRLOlomap6FvgisBPYlGTuS1DnAYfa8gywFaBtfw3wzGoUK0kazShHy0wk2dSWXw68GTgI3A28rXXbDdzWlm9v67TtX6gqvxonSWtolNMPbAb2JTmNwR+DW6rqT5J8Fbg5yX8A/hK4sfW/EfjjJNMM9tivGkPdkqTjWDTcq+oAcOE87d9gMP9+dPvzwNtXpTpJ0rL4DVVJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHVo0XBPsjXJ3UkOJnk4yXta+28n+WaS/e1yxdBtrksyneSRJG8d5xOQJB1rwwh9XgR+vaoeSPJq4P4kd7Zt11fV7w93TnIBcBXwU8BPAH+e5A1V9dJqFi5JWtiie+5VdbiqHmjL3wUOAluOc5NdwM1V9UJVPQZMAxevRrGSpNEsac49yTbgQuDe1vTuJAeS3JTkzNa2BXhq6GYzzPPHIMmeJFNJpmZnZ5dcuCRpYSOHe5JXAZ8B3ltV3wFuAF4P7AAOA38w13Wem9cxDVV7q2qyqiYnJiaWXLgkaWEjhXuS0xkE+yer6rMAVfV0Vb1UVT8A/pAfTr3MAFuHbn4ecGj1SpYkLWaUo2UC3AgcrKqPDLVvHur2S8BDbfl24KokG5OcD2wH7lu9kiVJixnlaJk3Ar8MfCXJ/tb2W8A7kuxgMOXyOPCrAFX1cJJbgK8yONLmGo+UkaS1tWi4V9WXmX8e/Y7j3OaDwAdXUJckaQX8hqokdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjq0aLgn2Zrk7iQHkzyc5D2t/awkdyZ5tF2f2dqT5KNJppMcSHLRuJ+EJOlHjbLn/iLw61X1k8BO4JokFwDXAndV1XbgrrYOcDmwvV32ADesetWSpONaNNyr6nBVPdCWvwscBLYAu4B9rds+4Mq2vAv4RA3cA2xKsnnVK5ckLWhJc+5JtgEXAvcC51bVYRj8AQDOad22AE8N3WymtR19X3uSTCWZmp2dXXrlkqQFjRzuSV4FfAZ4b1V953hd52mrYxqq9lbVZFVNTkxMjFqGJGkEI4V7ktMZBPsnq+qzrfnpuemWdn2ktc8AW4dufh5waHXKlSSNYpSjZQLcCBysqo8Mbbod2N2WdwO3DbW/sx01sxN4bm76RpK0NjaM0OeNwC8DX0myv7X9FvAh4JYkVwNPAm9v2+4ArgCmge8D71rViiVJi1o03Kvqy8w/jw5w6Tz9C7hmhXVJklbAb6hKUocMd0nqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDi4Z7kpuSHEny0FDbbyf5ZpL97XLF0LbrkkwneSTJW8dVuCRpYaPsuX8cuGye9uurake73AGQ5ALgKuCn2m3+c5LTVqtYSdJoFg33qvoS8MyI97cLuLmqXqiqx4Bp4OIV1CdJWoaVzLm/O8mBNm1zZmvbAjw11GemtR0jyZ4kU0mmZmdnV1CGJOloyw33G4DXAzuAw8AftPbM07fmu4Oq2ltVk1U1OTExscwyJEnzWVa4V9XTVfVSVf0A+EN+OPUyA2wd6noecGhlJUqSlmpZ4Z5k89DqLwFzR9LcDlyVZGOS84HtwH0rK1GStFQbFuuQ5FPAm4Czk8wAHwDelGQHgymXx4FfBaiqh5PcAnwVeBG4pqpeGk/pkqSFLBruVfWOeZpvPE7/DwIfXElRkqSV8RuqktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nq0KLhnuSmJEeSPDTUdlaSO5M82q7PbO1J8tEk00kOJLlonMVLkuY3yp77x4HLjmq7FrirqrYDd7V1gMuB7e2yB7hhdcqUJC3FouFeVV8CnjmqeRewry3vA64cav9EDdwDbEqyebWKlSSNZrlz7udW1WGAdn1Oa98CPDXUb6a1HSPJniRTSaZmZ2eXWYYkaT6r/YFq5mmr+TpW1d6qmqyqyYmJiVUuQ5JObcsN96fnplva9ZHWPgNsHep3HnBo+eVJkpZjueF+O7C7Le8Gbhtqf2c7amYn8Nzc9I0kae1sWKxDkk8BbwLOTjIDfAD4EHBLkquBJ4G3t+53AFcA08D3gXeNoWZJ0iIWDfeqescCmy6dp28B16y0KEnSyvgNVUnqkOEuSR0y3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdWjRf5B9PEkeB74LvAS8WFWTSc4CPg1sAx4H/llVfXtlZUqSlmI19tx/oap2VNVkW78WuKuqtgN3tXVJ0hoax7TMLmBfW94HXDmGx5AkHcdKw72Azye5P8me1nZuVR0GaNfnzHfDJHuSTCWZmp2dXWEZkqRhK5pzB95YVYeSnAPcmeRro96wqvYCewEmJydrhXVIkoasaM+9qg616yPA54CLgaeTbAZo10dWWqQkaWmWHe5JXpnk1XPLwFuAh4Dbgd2t227gtpUWKUlampVMy5wLfC7J3P38t6r6n0n+ArglydXAk8DbV16mJGkplh3uVfUN4Kfnaf+/wKUrKUqStDJ+Q1WSOmS4S1KHDHdJ6pDhLkkdMtwlqUOGuyR1yHCXpA4Z7pLUIcNdkjpkuEtShwx3SeqQ4S5JHTLcJalDhrskdchwl6QOGe6S1CHDXZI6ZLhLUocMd0nqkOEuSR0aW7gnuSzJI0mmk1w7rseRJB1rLOGe5DTgPwGXAxcA70hywTgeS5J0rHHtuV8MTFfVN6rqr4CbgV1jeixJ0lE2jOl+twBPDa3PAD873CHJHmBPW/1ekkeW+2DJcm+5oLOBb636vS4qoz6XE1TfUuTsZL3XOOo4jvxzWW2r/HMey/NY768VWPevlxW9Vl670IZxhft8w14/slK1F9g7psdfkSRTVTV5outYyHqvD6xxNaz3+sAaV8O46hvXtMwMsHVo/Tzg0JgeS5J0lHGF+18A25Ocn+RlwFXA7WN6LEnSUcYyLVNVLyZ5N/BnwGnATVX18Dgea0zW5XTRkPVeH1jjaljv9YE1roax1JeqWryXJOmk4jdUJalDhrskdeiUDPckm5LcmuRrSQ4m+YdJzkpyZ5JH2/WZrW+SfLSdRuFAkovWoL73JXk4yUNJPpXkjPbh9L2tvk+3D6pJsrGtT7ft28ZU001JjiR5aKhtyWOWZHfr/2iS3WtQ4++1n/OBJJ9Lsmlo23WtxkeSvHWofWynzpivxqFt/zZJJTm7ra/5OC5UX5J/08bk4SS/O9S+LsYwyY4k9yTZn2QqycWt/USM4dYkd7dseTjJe1r72r5equqUuwD7gH/Zll8GbAJ+F7i2tV0LfLgtXwH8KYNj93cC9465ti3AY8DL2/otwK+066ta28eAX2vL/xr4WFu+Cvj0mOr6J8BFwENDbUsaM+As4Bvt+sy2fOaYa3wLsKEtf3ioxguAB4GNwPnA1xl8+H9aW35d+914ELhgnDW29q0MDkB4Ajj7RI3jAmP4C8CfAxvb+jnrbQyBzwOXD43bF0/gGG4GLmrLrwb+dxurNX29nHJ77kl+jMEvx40AVfVXVfUsg9Mj7Gvd9gFXtuVdwCdq4B5gU5LNYy5zA/DyJBuAVwCHgUuAWxeob67uW4FLk9X/HmJVfQl45qjmpY7ZW4E7q+qZqvo2cCdw2ThrrKrPV9WLbfUeBt+5mKvx5qp6oaoeA6YZnDZjrKfOWGAcAa4H/h0/+mW/NR/HBer7NeBDVfVC63NkqL71MoYF/Fhbfg0//F7NiRjDw1X1QFv+LnCQwU7bmr5eTrlwZ7A3MQv8UZK/TPJfkrwSOLeqDsPghwOc0/rPdyqFLeMqrqq+Cfw+8CSDUH8OuB94diikhmv4m/ra9ueAHx9XfUdZ6pit6VjO418w2EPiOLWseY1JfhH4ZlU9eNSm9VLjG4B/3Kb9/leSn1ln9QG8F/i9JE8xeP1ctx5qzGCa9ELgXtb49XIqhvsGBm/pbqiqC4H/x+At0kIWPZXCamrzcLsYvM39CeCVDM6uuVANa1rfiBaq6YTVmuT9wIvAJ+eaFqhlrX/erwDeD/z7+TYvUMtaj+MGBtMCO4HfAG5p7w7XS30weHfxvqraCryP9s78OLWMvcYkrwI+A7y3qr5zvK4L1LKiGk/FcJ8BZqrq3rZ+K4Owf3puuqVdHxnqv5anUngz8FhVzVbVXwOfBf4Rg7dqc186G67hb+pr21/D/G/7x2GpY3ZCTkvRPoj6p8A/rzaZuY5qfD2DP+QPJnm8Pd4DSf72OqpxBvhsmza4D/gBg5NxrZf6AHYzeK0A/HcGU0OcqBqTnM4g2D9ZVXN1renr5ZQL96r6P8BTSf5ua7oU+CqD0yPMfRq9G7itLd8OvLN9or0TeG7urdWYPAnsTPKKtnc0V9/dwNsWqG+u7rcBXxgKsHFb6pj9GfCWJGe2dyhvaW1jk+Qy4DeBX6yq7x9V+1UZHG10PrAduI81PnVGVX2lqs6pqm1VtY3BC/qi9nu6XsbxfzD4zIckb2DwIem3WCdj2BwCfr4tXwI82pbXfAzb6/ZG4GBVfWRo09q+Xlbj0+GT7QLsAKaAAwx+cc9kME99F4NfiruAs1rfMPjHI18HvgJMrkF9vwN8DXgI+GMGRyO8jsELZ5rBnsnckQtntPXptv11Y6rpUww+A/hrBgF09XLGjMG893S7vGsNapxmMG+5v10+NtT//a3GR2hHWrT2Kxgc4fB14P3jrvGo7Y/zw6Nl1nwcFxjDlwH/tf0+PgBcst7GEPg5Bp9NPchgfvsfnMAx/DkG0ycHhn7vrljr14unH5CkDp1y0zKSdCow3CWpQ4a7JHXIcJekDhnuktQhw12SOmS4S1KH/j9q1eKIDN83ygAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(tdata['battery_power'], bins=6, color=\"yellow\", edgecolor=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([260.,  57., 763.,  69., 153., 686.]),\n",
       " array([ 501,  680,  720, 1300, 1350, 1480, 2000]),\n",
       " <a list of 6 Patch objects>)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD8CAYAAACMwORRAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAU+UlEQVR4nO3df5Bd5X3f8fenyCDjxEjAQqkke3GsuGE6Y1C2jBK3aYNcB2jG4g+YwZMpKlVHHZem/tE2xvVMO5npH3aSCS0zHTway4lIXQwmdtBkaGJV4Gb6B3IWzE/LVAtGaC0FrQPISSjYNN/+cZ81F2lXe1fae7UcvV8zd+5znvPc3e+e3fvZc5977jmpKiRJ3fI3TncBkqSlZ7hLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHDRTuST6R5KkkTya5K8nKJJcm2Ztkf5K7k5zdxp7Tlqfa+vFh/gCSpOMtGO5J1gD/Gpioqr8DnAXcCHwOuK2q1gMvAVvbQ7YCL1XVe4Hb2jhJ0ggNOi2zAnh7khXAucBh4Crg3rZ+J3Bda29uy7T1m5JkacqVJA1ixUIDqup7SX4LeB74v8DXgYeBl6vq9TZsGljT2muAg+2xryc5ClwAfH++73HhhRfW+Pj4yf4MknRGevjhh79fVWNzrVsw3JOsprc3finwMvAV4Jo5hs6ex2CuvfTjznGQZBuwDeBd73oXk5OTC5UiSeqT5MB86waZlvkg8N2qmqmqHwFfBX4eWNWmaQDWAodaexpY177xCuA84MVjv2hVba+qiaqaGBub8x+PJOkkDRLuzwMbk5zb5s43Ad8GHgSub2O2APe19q62TFv/QHl2MkkaqQXDvar20ntj9BHgifaY7cCngE8mmaI3p76jPWQHcEHr/yRw6xDqliSdQJbDTvXExEQ55y5Ji5Pk4aqamGudn1CVpA4y3CWpgwx3Seogw12SOshwl6QOWvATqlp64+OvcuDAytNdhpbYu9/9Ks895+9Vy4PhfhocOLCSKs+l1jXJ6T+sWJrltIwkdZDhLkkdZLhLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHGe6S1EGGuyR1kOEuSR1kuEtSBy0Y7knel+TRvtsPknw8yflJdifZ3+5Xt/FJcnuSqSSPJ9kw/B9DktRvkAtkP11Vl1fV5cDPAq8AX6N34es9VbUe2MMbF8K+BljfbtuAO4ZRuCRpfoudltkEPFNVB4DNwM7WvxO4rrU3A3dWz0PAqiSXLEm1kqSBLDbcbwTuau2Lq+owQLu/qPWvAQ72PWa69UmSRmTgcE9yNvBh4CsLDZ2j77gTXSfZlmQyyeTMzMygZUiSBrCYPfdrgEeq6oW2/MLsdEu7P9L6p4F1fY9bCxw69otV1faqmqiqibGxscVXLkma12LC/SO8MSUDsAvY0tpbgPv6+m9qR81sBI7OTt9IkkZjoMvsJTkX+EfAv+jr/ixwT5KtwPPADa3/fuBaYIrekTU3L1m1kqSBDBTuVfUKcMExfX9O7+iZY8cWcMuSVCfppHkh9reGYV1Y3QtkSx3lhdjfGoZ1YXVPPyBJHWS4S1IHGe6S1EGGuyR1kOEuSR1kuEtSBxnuktRBhrskdZDhLkkdZLhLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHGe6S1EGGuyR1kOEuSR00ULgnWZXk3iTfSbIvyc8lOT/J7iT72/3qNjZJbk8yleTxJBuG+yNIko416J77fwH+qKr+NvB+YB9wK7CnqtYDe9oywDXA+nbbBtyxpBVLkha0YLgneSfwC8AOgKr6YVW9DGwGdrZhO4HrWnszcGf1PASsSnLJklcuSZrXIHvu7wFmgN9J8q0kX0jyDuDiqjoM0O4vauPXAAf7Hj/d+iRJIzJIuK8ANgB3VNUVwF/xxhTMXOa63Ppxl/dOsi3JZJLJmZmZgYqVJA1mkHCfBqaram9bvpde2L8wO93S7o/0jV/X9/i1wKFjv2hVba+qiaqaGBsbO9n6JUlzWDDcq+rPgINJ3te6NgHfBnYBW1rfFuC+1t4F3NSOmtkIHJ2dvpEkjcaKAcf9KvClJGcDzwI30/vHcE+SrcDzwA1t7P3AtcAU8EobK0kaoYHCvaoeBSbmWLVpjrEF3HKKdUmSToGfUJWkDjLcJamDDHdJ6iDDXZI6yHCXpA4y3CWpgwx3Seogw12SOshwl6QOMtwlqYMMd0nqIMNdkjrIcJekDjLcJamDDHdJ6iDDXZI6yHCXpA4y3CWpgwx3SeqggcI9yXNJnkjyaJLJ1nd+kt1J9rf71a0/SW5PMpXk8SQbhvkDSJKOt5g991+sqsuravZC2bcCe6pqPbCnLQNcA6xvt23AHUtVrCRpMKcyLbMZ2NnaO4Hr+vrvrJ6HgFVJLjmF7yNJWqRBw72Aryd5OMm21ndxVR0GaPcXtf41wMG+x063vjdJsi3JZJLJmZmZk6tekjSnFQOO+0BVHUpyEbA7yXdOMDZz9NVxHVXbge0AExMTx62XJJ28gfbcq+pQuz8CfA24Enhhdrql3R9pw6eBdX0PXwscWqqCJUkLWzDck7wjyU/OtoEPAU8Cu4AtbdgW4L7W3gXc1I6a2QgcnZ2+kSSNxiDTMhcDX0syO/6/V9UfJflT4J4kW4HngRva+PuBa4Ep4BXg5iWvWpJ0QguGe1U9C7x/jv4/BzbN0V/ALUtSnSTppPgJVUnqIMNdkjrIcJekDjLcJamDDHdJ6iDDXZI6yHCXpA4y3CWpgwx3Seogw12SOshwl6QOMtwlqYMMd0nqIMNdkjrIcJekDjLcJamDDHdJ6iDDXZI6aOBwT3JWkm8l+cO2fGmSvUn2J7k7ydmt/5y2PNXWjw+ndEnSfBaz5/4xYF/f8ueA26pqPfASsLX1bwVeqqr3Are1cZKkERoo3JOsBf4x8IW2HOAq4N42ZCdwXWtvbsu09ZvaeEnSiAy65/6fgV8D/rotXwC8XFWvt+VpYE1rrwEOArT1R9v4N0myLclkksmZmZmTLF+SNJcFwz3JLwNHqurh/u45htYA697oqNpeVRNVNTE2NjZQsZKkwawYYMwHgA8nuRZYCbyT3p78qiQr2t75WuBQGz8NrAOmk6wAzgNeXPLKJUnzWnDPvao+XVVrq2ocuBF4oKp+BXgQuL4N2wLc19q72jJt/QNVddyeuyRpeE7lOPdPAZ9MMkVvTn1H698BXND6PwncemolSpIWa5BpmR+rqm8A32jtZ4Er5xjzKnDDEtQmSTpJfkJVkjrIcJekDjLcJamDDHdJ6iDDXZI6yHCXpA4y3CWpgwx3Seogw12SOshwl6QOMtwlqYMMd0nqIMNdkjrIcJekDjLcJamDDHdJ6iDDXZI6yHCXpA5aMNyTrEzyzSSPJXkqya+3/kuT7E2yP8ndSc5u/ee05am2fny4P4Ik6ViD7Lm/BlxVVe8HLgeuTrIR+BxwW1WtB14CtrbxW4GXquq9wG1tnCRphBYM9+r5y7b4tnYr4Crg3ta/E7iutTe3Zdr6TUmyZBVLkhY00Jx7krOSPAocAXYDzwAvV9Xrbcg0sKa11wAHAdr6o8AFc3zNbUkmk0zOzMyc2k8hSXqTgcK9qv5fVV0OrAWuBH5mrmHtfq699Dquo2p7VU1U1cTY2Nig9UqSBrCoo2Wq6mXgG8BGYFWSFW3VWuBQa08D6wDa+vOAF5eiWEnSYAY5WmYsyarWfjvwQWAf8CBwfRu2BbivtXe1Zdr6B6rquD13SdLwrFh4CJcAO5OcRe+fwT1V9YdJvg18Ocl/Ar4F7GjjdwC/l2SK3h77jUOoW5J0AguGe1U9DlwxR/+z9Obfj+1/FbhhSaqTJJ0UP6EqSR1kuEtSBxnuktRBhrskdZDhLkkd9JYP9/HxV0lYVrfx8VdP92aRdIYb5Dj3Ze3AgZVULa/zkiV+ZkvS6fWW33OXJB3PcJekDjLcJamDDHdJ6iDDXZI6yHCXpA4y3CWpgwx3Seogw12SOshwl6QOMtwlqYMGuUD2uiQPJtmX5KkkH2v95yfZnWR/u1/d+pPk9iRTSR5PsmHYP4Qk6c0G2XN/Hfg3VfUzwEbgliSXAbcCe6pqPbCnLQNcA6xvt23AHUtetSTphBYM96o6XFWPtPZfAPuANcBmYGcbthO4rrU3A3dWz0PAqiSXLHnlkqR5LWrOPck4cAWwF7i4qg5D7x8AcFEbtgY42Pew6dYnSRqRgcM9yU8Avw98vKp+cKKhc/Qdd4LzJNuSTCaZnJmZGbQMSdIABgr3JG+jF+xfqqqvtu4XZqdb2v2R1j8NrOt7+Frg0LFfs6q2V9VEVU2MjY2dbP2SpDkMcrRMgB3Avqr67b5Vu4Atrb0FuK+v/6Z21MxG4Ojs9I0kaTQGuczeB4B/AjyR5NHW9++BzwL3JNkKPA/c0NbdD1wLTAGvADcvacWSpAUtGO5V9b+Zex4dYNMc4wu45RTrkiSdAj+hKkkdZLhLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHGe6S1EGGuzRi4+OvkjD0m85sg3xCVdISOnBgJVXDT9/kuPP16QzinrskdZDhLkkdZLhLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHGe6S1EGGuyR10CAXyP5ikiNJnuzrOz/J7iT72/3q1p8ktyeZSvJ4kg3DLF6SNLdB9tx/F7j6mL5bgT1VtR7Y05YBrgHWt9s24I6lKVOStBgLhntV/Qnw4jHdm4Gdrb0TuK6v/87qeQhYleSSpSpWkjSYk51zv7iqDgO0+4ta/xrgYN+46dYnSRqhpX5Dda5T3c15arok25JMJpmcmZlZ4jIk6cx2suH+wux0S7s/0vqngXV949YCh+b6AlW1vaomqmpibGzsJMuQJM3lZMN9F7CltbcA9/X139SOmtkIHJ2dvpEkjc6CF+tIchfwD4ELk0wD/xH4LHBPkq3A88ANbfj9wLXAFPAKcPMQapYkLWDBcK+qj8yzatMcYwu45VSLkiSdGj+hKkkdZLhLUgcZ7pLUQQvOuUsazDnnvEqy8nSXIQGGu7RkXnttJVVzfY7vzZI5P9cnLSmnZSSpg9xzHwJfnks63Qz3IVjo5bkvyyUNm9MyktRBhrskdZDhLkkdZLhLUgcZ7pLUQYa7JHWQ4S5JHWS4S1IHGe6S1EGGuyR10FDCPcnVSZ5OMpXk1mF8D0nS/JY83JOcBfxX4BrgMuAjSS5b6u8jSZrfMPbcrwSmqurZqvoh8GVg8xC+jyRpHsMI9zXAwb7l6dYnSRqRYZzyd65z3R53jtsk24BtbfEvkzx90t9w4YvfLMaFwPdP7UtkgZoWWr+gJahx6JZ7jUOob9Df68C//1Os8ZT/zhay3H/H8JaoMRcmJ13ju+dbMYxwnwbW9S2vBQ4dO6iqtgPbh/D9T0mSyaqaON11nIg1nrrlXh8s/xqXe31wZtc4jGmZPwXWJ7k0ydnAjcCuIXwfSdI8lnzPvapeT/KvgD8GzgK+WFVPLfX3kSTNbyiX2auq+4H7h/G1R2DZTRXNwRpP3XKvD5Z/jcu9PjiDa0yV1/OUpK7x9AOS1EFnZLgnWZXk3iTfSbIvyc8lOT/J7iT72/3qNjZJbm+nUng8yYYR1PeJJE8leTLJXUlWtjeo97b67m5vVpPknLY81daPD6mmLyY5kuTJvr5Fb7MkW9r4/Um2jKDG32y/58eTfC3Jqr51n241Pp3kl/r6h3L6jLnq61v3b5NUkgvb8rLZhq3/V9s2eSrJb/T1j3QbzldjksuTPJTk0SSTSa5s/SPfjknWJXmwZctTST7W+kf7fKmqM+4G7AT+eWufDawCfgO4tfXdCnyuta8F/ge94/c3AnuHXNsa4LvA29vyPcA/bfc3tr7PAx9t7X8JfL61bwTuHlJdvwBsAJ7s61vUNgPOB55t96tbe/WQa/wQsKK1P9dX42XAY8A5wKXAM/QOADirtd/T/jYeAy4bVn2tfx29AxAOABcuw234i8D/BM5pyxedrm14ghq/DlzTt+2+cbq2I3AJsKG1fxL4P21bjfT5csbtuSd5J70/jh0AVfXDqnqZ3ikSdrZhO4HrWnszcGf1PASsSnLJkMtcAbw9yQrgXOAwcBVw7zz1zdZ9L7ApWfqPrlTVnwAvHtO92G32S8Duqnqxql4CdgNXD7PGqvp6Vb3eFh+i97mL2Rq/XFWvVdV3gSl6p84Y2ukz5tmGALcBv8abP+y3bLYh8FHgs1X1WhtzpK/GkW7DE9RYwDtb+zze+GzNyLdjVR2uqkda+y+AffR22kb6fDnjwp3e3sQM8DtJvpXkC0neAVxcVYeh98sBLmrjR3o6har6HvBbwPP0Qv0o8DDwcl9I9dfw4/ra+qPABcOq7xiL3Wan+9QU/4zeHhInqGWkNSb5MPC9qnrsmFXLor7mp4G/36b9/leSv7sMa/w48JtJDtJ7/nx6OdSY3jTpFcBeRvx8ORPDfQW9l3R3VNUVwF/Re4k0n4FOp7BU2jzcZnovc/8W8A56Z9icr4aR1jeg+Wo6bbUm+QzwOvCl2a55ahlZjUnOBT4D/Ie5Vs9Tx+nYhivoTQtsBP4dcE97dbicavwo8ImqWgd8gvbK/AS1DL3GJD8B/D7w8ar6wYmGzlPLKdV4Job7NDBdVXvb8r30wv6F2emWdn+kb/yCp1NYQh8EvltVM1X1I+CrwM/Te6k2+7mE/hp+XF9bfx5zv/QfhsVus1FvS1ptW4BfBn6l2mTmMqnxp+j9E38syXPtez2S5G8uk/pmTQNfbdMG3wT+mt45W5ZTjVvoPVcAvkJvaojTVWOSt9EL9i9V1WxdI32+nHHhXlV/BhxM8r7WtQn4Nr1TJMy+G70FuK+1dwE3tXe0NwJHZ19aDcnzwMYk57a9o9n6HgSun6e+2bqvBx7oC7BhW+w2+2PgQ0lWt1coH2p9Q5PkauBTwIer6pVjar8xvaONLgXWA99khKfPqKonquqiqhqvqnF6T+YN7W902WxD4A/ovedDkp+m9ybp91kG27DPIeAftPZVwP7WHvl2bM/bHcC+qvrtvlWjfb4sxbvDb7UbcDkwCTxO7w93Nb156j30/ij2AOe3saF38ZFngCeAiRHU9+vAd4Angd+jdzTCe+g9cabo7ZnMHrmwsi1PtfXvGVJNd9F7D+BH9EJo68lsM3rz3lPtdvMIapyiN2/5aLt9vm/8Z1qNT9OOtGj919I7wuEZ4DPDrO+Y9c/xxtEyy2kbng38t/b3+Ahw1enahieo8e/Re2/qMXrz2z97urZjq6Xo5cvs3921o36++AlVSeqgM25aRpLOBIa7JHWQ4S5JHWS4S1IHGe6S1EGGuyR1kOEuSR1kuEtSB/1/7QlT7OUnG20AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(tdata['battery_power'], bins=[501, 680, 720, 1300, 1350,1480, 2000], color=\"yellow\", edgecolor=\"blue\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "tdata['space']= tdata['sc_h']*tdata['sc_w']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>battery_power</th>\n",
       "      <th>blue</th>\n",
       "      <th>clock_speed</th>\n",
       "      <th>dual_sim</th>\n",
       "      <th>fc</th>\n",
       "      <th>four_g</th>\n",
       "      <th>int_memory</th>\n",
       "      <th>m_dep</th>\n",
       "      <th>mobile_wt</th>\n",
       "      <th>n_cores</th>\n",
       "      <th>pc</th>\n",
       "      <th>px_height</th>\n",
       "      <th>px_width</th>\n",
       "      <th>ram</th>\n",
       "      <th>sc_h</th>\n",
       "      <th>sc_w</th>\n",
       "      <th>talk_time</th>\n",
       "      <th>three_g</th>\n",
       "      <th>touch_screen</th>\n",
       "      <th>wifi</th>\n",
       "      <th>price_range</th>\n",
       "      <th>space</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842</td>\n",
       "      <td>0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0.6</td>\n",
       "      <td>188</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>756</td>\n",
       "      <td>2549</td>\n",
       "      <td>9</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1021</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53</td>\n",
       "      <td>0.7</td>\n",
       "      <td>136</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>905</td>\n",
       "      <td>1988</td>\n",
       "      <td>2631</td>\n",
       "      <td>17</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>563</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>0.9</td>\n",
       "      <td>145</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>1263</td>\n",
       "      <td>1716</td>\n",
       "      <td>2603</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>615</td>\n",
       "      <td>1</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.8</td>\n",
       "      <td>131</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>1216</td>\n",
       "      <td>1786</td>\n",
       "      <td>2769</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1821</td>\n",
       "      <td>1</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>44</td>\n",
       "      <td>0.6</td>\n",
       "      <td>141</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>1208</td>\n",
       "      <td>1212</td>\n",
       "      <td>1411</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   battery_power  blue  clock_speed  dual_sim  fc  four_g  int_memory  m_dep  \\\n",
       "0            842     0          2.2         0   1       0           7    0.6   \n",
       "1           1021     1          0.5         1   0       1          53    0.7   \n",
       "2            563     1          0.5         1   2       1          41    0.9   \n",
       "3            615     1          2.5         0   0       0          10    0.8   \n",
       "4           1821     1          1.2         0  13       1          44    0.6   \n",
       "\n",
       "   mobile_wt  n_cores  pc  px_height  px_width   ram  sc_h  sc_w  talk_time  \\\n",
       "0        188        2   2         20       756  2549     9     7         19   \n",
       "1        136        3   6        905      1988  2631    17     3          7   \n",
       "2        145        5   6       1263      1716  2603    11     2          9   \n",
       "3        131        6   9       1216      1786  2769    16     8         11   \n",
       "4        141        2  14       1208      1212  1411     8     2         15   \n",
       "\n",
       "   three_g  touch_screen  wifi  price_range  space  \n",
       "0        0             0     1            1     63  \n",
       "1        1             1     0            2     51  \n",
       "2        1             1     0            2     22  \n",
       "3        1             0     0            2    128  \n",
       "4        1             1     0            1     16  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdata.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "for cols in tdata.columns:\n",
    "    tdata[cols]=label_encoder.fit_transform(tdata[cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.23366834170854273\n",
      "Precision: 0.05841708542713568\n",
      "Recall: 0.25\n",
      "report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.00      0.00      0.00       106\n",
      "           1       0.00      0.00      0.00       100\n",
      "           2       0.00      0.00      0.00        99\n",
      "           3       0.23      1.00      0.38        93\n",
      "\n",
      "    accuracy                           0.23       398\n",
      "   macro avg       0.06      0.25      0.09       398\n",
      "weighted avg       0.05      0.23      0.09       398\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n",
      "C:\\Users\\POP RAYANEH\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\classification.py:1437: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    }
   ],
   "source": [
    "#Create an rbf Kernel svm Classifier\n",
    "clf = svm.SVC(kernel='rbf') \n",
    "\n",
    "#Train the model using the training sets\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "#Predict the response for test dataset\n",
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "# Model Accuracy: how often is the classifier correct?\n",
    "print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n",
    "\n",
    "# Model Precision: what percentage of positive tuples are labeled as such?\n",
    "print(\"Precision:\",metrics.precision_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "# Model Recall: what percentage of positive tuples are labelled as such?\n",
    "print(\"Recall:\",metrics.recall_score(y_test, y_pred,average='macro'))\n",
    "\n",
    "report =classification_report(y_test, y_pred)\n",
    "print('report:', report, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The prediction accuracy is:  81.90954773869346 %\n"
     ]
    }
   ],
   "source": [
    "#Import the DecisionTreeClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "#making the model with entropy methode\n",
    "tree = DecisionTreeClassifier(criterion = 'entropy').fit(X_train,y_train)\n",
    "\n",
    "#make prediction\n",
    "prediction = tree.predict(X_test)\n",
    "\n",
    "#Check the accuracy\n",
    "\n",
    "print(\"The prediction accuracy is: \",tree.score(X_test,y_test)*100,\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
